#%RAML 1.0
title: ECP Skeleton
version: v1
baseUri: http://localhost:3000

documentation:
 - title: Home
   content: !include documentation/home.txt
 - title: Architecture
   content: !include documentation/architecture.txt

types:
  Password:
    type: string
    minLength: 8
    description: |
      Password needs to have:
        - One uppercase character
        - One lowercase character
        - One number

  Login:
    properties:
      email:
        description: Needs to be valid email address
      password: Password

  User:
    type: object
    properties:
      id: number
      firstname:
        type: string
        required: false
      lastname:
        type: string
        required: false
      email: string
      bio:
        type: string
        required: false
      resourceId:
        type: number
        required: false
      image:
        type: string
        required: false

  # Used in error object
  DebugInfo:
    description: Additional data for error handling.
    properties:
      path:
        type: string
        description: Name of invalid property
      message:
        type: string
        description: Error message

  Error:
    description: Generic error.
    type: object
    properties:
      message:
        type: string
        description: Error message thrown from API.
        required: true
      debugInfo:
        type: DebugInfo[]
        description: Array of objects containing path to wrong property and error message.
        required: false
      error:
        properties:
          message: string
          debugInfo:
            type: DebugInfo[]
            required: false
          status:
            type: number
            description: Response status.
            required: true

/authenticate:
  post:
    description: Authenticate user
    body:
      application/json:
        type: Login
        example: !include examples/controllers/authenticate/Login.json
    responses:
      200:
        description: Successfully authenticated user.
        body:
          application/json:
            example: !include examples/controllers/authenticate/userWithToken.json
      400:
        description: |
          Bad requests made for authentication. There are two scenarios.
            - Wrong parameters in body
            - Wrong password
        body:
          application/json:
            type: Error
            examples:
              validationError: {
                message: "Parameters error",
                debugInfo: [{
                  path: "email",
                  message: "Email is required"
                }, {
                  path: "password",
                  message: "Password is required"
                }],
                error: {
                  message: "Parameters error",
                  debugInfo: [{
                    path: "email",
                    message: "Email is required"
                  }, {
                    path: "password",
                    message: "Password is required"
                  }],
                  status: 400
                }
              }
              wrongPassword: {
                "message": "Wrong password",
                "error": {
                  "message": "Wrong password",
                  "status": 400
                }
              }
      404:
        body:
          application/json:
            type: Error
            example: !include examples/errors/generic/userNotFound.json

/changeEmail:
  post:
    description: Request to change user email address.
    body:
      application/json:
        type: object
        properties:
          oldEmail:
            type: string
            description: Users current email address.
          newEmail:
            type: string
            description: Users new email address.
          password: Password
        example: {
          oldEmail: "some.old@mail.com",
          password: "Password123",
          newEmail: "some.new@mail.com"
        }
    responses:
      200:
        description: An email will be sent to the user to confirm their new email address.
        body:
          application/json:
            type: object
            example: {
              message: "An email has been sent to your new email address"
            }
      400:
        description: |
          Bad requests.
          - Wrong parameters sent
          - Wrong user password
          - New email is already in use
        body:
          application/json:
            type: Error
            examples:
              validationError: {
                message: "Parameters error",
                debugInfo: [{
                  path: "oldEmail",
                  message: "oldEmail is required"
                }, {
                  path: "newEmail",
                  message: "newEmail is required"
                }, {
                  path: "password",
                  message: "Password is required"
                }],
                error: {
                  message: "Parameters error",
                  debugInfo: [{
                    path: "email",
                    message: "oldEmail is required"
                  }, {
                    path: "newEmail",
                    message: "newEmail is required"
                  }, {
                    path: "password",
                    message: "Password is required"
                  }],
                  status: 400
                }
              }
              wrongPassword: {
                "message": "Wrong password",
                "error": {
                  "message": "Wrong password",
                  "status": 400
                }
              }
              emailInUse: {
                message: "Email is already in use",
                error: {
                  message: "Email is already in use",
                  status: 400
                }
              }
      404:
        body:
          application/json:
            type: Error
            example: !include examples/errors/generic/userNotFound.json

/emailConfirm:
  post:
    description: |
      Used for email confirmation.
      There are two scenarios:
        - If a user requested to change email, it will update the user email
        - If a new account was created and the user followed the link in his email it will confirm his email address
    body:
      application/json:
        type: object
        properties:
          token: string
        example: {
          token: "123e4567-e89b-12d3-a456-426655440000"
        }
