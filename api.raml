#%RAML 1.0
title: ECP Skeleton
version: v1
baseUri: http://localhost:3000

description: Skeleton routes documentation.
documentation:
 - title: Home
   content: !include documentation/home.txt
 - title: Architecture
   content: !include documentation/architecture.txt


types:
  RegularLogin:
    type: !include schemas/authenticate/regular/Login.json
  LoginBody:
    type: object
    properties:
      email: string
      password: string
  User:
    type: object
    properties:
      id: number
      firstname:
        type: string
        required: false
      lastname:
        type: string
        required: false
      email: string
      password:
        type: string
        required: false
      bio:
        type: string
        required: false
      resourceId:
        type: number
        required: false
      image:
        type: string
        required: false
  DebugInfo:
    properties:
      path: string
      message: string
  Error:
    description: Generic error thrown on routes.
    type: object
    properties:
      message:
        type: string
        description: Error message thrown from API.
        required: true
      debugInfo:
        type: DebugInfo[]
        description: Array of objects containing path to wrong property and error message.
        required: false
      error:
        properties:
          message: string
          debugInfo:
            type: DebugInfo[]
            required: false
          status:
            type: number
            description: Response status.
            required: true

/authenticate:
  post:
    description: Authenticate user
    body:
      application/json:
        type: RegularLogin
        example: !include examples/controllers/authenticate/Login.json
    responses:
      200:
        description: Successfully authenticated user.
        body:
          application/json:
            example: !include schemas/authenticate/regular/userWithToken.json
      400:
        description: |
          Bad requests made for authentication. There are two scenarios.
            - Wrong parameters in body
            - Wrong password
        body:
          application/json:
            type: Error
            examples:
              validationError: {
                message: "Parameters error",
                debugInfo: [{
                  path: "email",
                  message: "Email is required"
                }, {
                  path: "password",
                  message: "Password is required"
                }],
                error: {
                  message: "Parameters error",
                  debugInfo: [{
                    path: "email",
                    message: "Email is required"
                  }, {
                    path: "password",
                    message: "Password is required"
                  }],
                  status: 400
                }
              }
              wrongPassword: {
                "message": "Wrong password",
                "error": {
                  "message": "Wrong password",
                  "status": 400
                }
              }
      404:
        body:
          application/json:
            type: Error
            example: !include schemas/generic_errors/userNotFound.json

/superAdmin/authenticate:
  post:
    description: Authenticate superadmin
    body:
      application/json:
        type: LoginBody
    responses:
      200:
        description: Successfully authenticated superadmin.
        body:
          application/json:
            example: !include schemas/authenticate/superAdmin/superAdminWithToken.json
      400:
        description: |
          Bad requests made for authentication. There are two scenarios.
            - Wrong parameters in body
            - Wrong password
        body:
          application/json:
            type: Error
            examples:
              validationError: {
                message: "Parameters error",
                debugInfo: [{
                  path: "email",
                  message: "Email is required"
                }, {
                  path: "password",
                  message: "Password is required"
                }],
                error: {
                  message: "Parameters error",
                  debugInfo: [{
                    path: "email",
                    message: "Email is required"
                  }, {
                    path: "password",
                    message: "Password is required"
                  }],
                  status: 400
                }
              }
              wrongPassword: {
                "message": "Wrong password",
                "error": {
                  "message": "Wrong password",
                  "status": 400
                }
              }
      404:
        body:
          application/json:
            type: Error
            example: !include schemas/generic_errors/userNotFound.json

# /users:
#   get:
#     queryParameters:
#       page:
#         description: Defines which page to show, depending on the number of users and total number of users.
#         type: number
#         required: false
#       limit:
#         description: Defines the number of users to show per page.
#         type: number
#         required: false
#     description: |
#       Paginated list of users.
#     responses:
#       200:
#         body:
#           application/json:
#             type: object
#             properties:
#               count:
#                 type: number
#               rows:
#                 type: array
#                 items: User
#             example: !include examples/controllers/users/list.json
#   post:
#     body:
#       application/json:
#
#     responses:
#       200:
#         description: New user successfully created.
#         body:
#           application/json:
#             type: User
